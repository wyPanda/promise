// promise封装
let resolvePromise = (promise, x, resolve, reject) => {
    if (promise === x) {
        return reject(new TypeError('循环引用')) 
    }
    if (typeof x === 'function' || (typeof x === 'object' && x !== null)) {
        let called;
        try {
            let then = x.then;
            if (typeof then === 'function') {
                then.call(x, y => {
                    if (called) return;
                    called = true;
                    resolvePromise(promise, y, resolve, reject);
                }, r => {
                    if (called) return;
                    called = true;
                    reject(r);
                });
            } else {
                resolve(x);
            }
        } catch (e) {
            if (called) return;
            called = true;
            reject(e);
        }
    } else {
        resolve(x);
    }
}

class Promise {
    constructor (executor) {
        this.status = 'pending';
        this.value = undefined;
        this.reason = undefined;
        this.onFufiledCallbacks = [];
        this.onRejectedCallbacks = [];
        
        let resolve = (value) => {
            if (value instanceof Promise) {
                return value.then(resolve, reject);
            }
            if (this.status === 'pending') {
                this.status = 'fulfiled';
                this.value = value;
                this.onFufiledCallbacks.forEach(fn => fn());
            }
        }
        let reject = (reason) => {
            if (this.status === 'pending') {
                this.status = 'rejected';
                this.reason = reason;
                this.onRejectedCallbacks.forEach(fn => fn());
            }
        } 
        try {
            executor(resolve, reject);
        } catch (e) {
            reject(e);
        }
    }
    then (onFufiled, onRejected) {
        let promise2;
        onFufiled = typeof onFufiled === 'function' ? onFufiled : d => d;
        onRejected = typeof onRejected === 'function' ? onRejected : r => {throw r};
        promise2 = new Promise((resolve, reject) => {
            if (this.status === 'fulfiled') {
                setTimeout(()=>{
                    try {
                        let x = onFufiled(this.value);
                        resolvePromise(promise2, x, resolve, reject);
                    } catch (e) {
                        reject(e);
                    }
                },0)
            }
            if (this.status === 'rejected') {
                setTimeout(()=>{
                    try {
                        let x = onRejected(this.reason);;
                        resolvePromise(promise2, x, resolve, reject);
                    } catch (e) {
                        reject(e);
                    }
                    
                },0)
            }
            if (this.status === 'pending') {
                this.onFufiledCallbacks.push(() => {
                    setTimeout(()=>{
                        try {
                            let x = onFufiled(this.value);
                            resolvePromise(promise2, x, resolve, reject);
                        } catch (e) {
                            reject(e);
                        }
                        
                    },0)
                    
                });
                this.onRejectedCallbacks.push(() => {
                    setTimeout(()=>{
                        try {
                            let x = onRejected(this.reason);
                            resolvePromise(promise2, x, resolve, reject);
                        } catch (e) {
                            reject(e);
                        }
                        
                    },0)
                    
                });
            }
        });
        return promise2;
    }
    catch (rejectFn) {
        return this.then(null, rejectFn);
    }
    finally (fn) {
        return this.then((data) => {
            return Promise.resolve(fn()).then(()=>data);
        }, (err) => {
            return Promise.resolve(fn()).then(()=>{throw err});
        });
    }
}

Promise.resolve = (value) => {
    return new Promise((resolve, reject) => {
        resolve(value)
    })
}

Promise.reject = (reason) => {
    return new Promise((resolve, reject) => {
        reject(reason)
    })
}

Promise.all = (values) => {
    return new Promise((resolve, reject)=>{
        let results = [];
        let i = 0;
        let processData = (value, index)=>{
            results[index] = value;
            if (++i === values.length) {
                resolve(results)
            }
        }
        for (let i=0;i<values.length;i++){
            let current = values[i];
            if (typeof current === 'function' || (typeof current == 'object' && current != null)) {
                if (typeof current.then == 'function') {
                    current.then(x=>{
                        processData(x, i)
                    },reject)
                } else {
                    processData(current, i)
                }
            } else {
                processData(current, i)
            }
        }
    })
} 

Promise.race = (values) => {
    return new Promise((resolve, reject)=>{
        for (let i=0;i<values.length;i++){
            let current = values[i];
            if (typeof current === 'function' || (typeof current == 'object' && current != null)) {
                if (typeof current.then == 'function') {
                    current.then(x=>{
                        resolve(x)
                    },reject)
                } else {
                    resolve(current)
                }
            } else {
                resolve(current)
            }
        }
    })
} 

Promise.defer = Promise.deferred = function(){
    let dfd = {};
    dfd.promise = new Promise((resolve, reject) => {
        dfd.resolve = resolve;
        dfd.reject = reject;
    })
    return dfd;
}

module.exports = Promise;




// 数组扁平化
let newArr = [[1,2,3,[4,5,[6]]],[4,5,6,[7,8,[9]]],[7,8,9]];

let process = (arr) => {
    return arr.reduce((prev, curr) => {
        if (curr instanceof Array) {
            curr = process([...curr])
        } else {
            curr = [curr]
        }
        return [...prev, ...curr]
    },[]);
}

console.log(process(newArr))
