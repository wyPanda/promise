class Promise {
	constructor (executor) {
		let self = this;
		self.value = undefined;
		self.reason = undefined;
		self.status = 'pending';
		self.onResolvedCallbacks = [];
		self.onRejectedCallbacks = [];

		// 等待 => 成功， 等待 => 失败， 成功 <≠> 失败
		let resolve = value => {
			if (self.status === 'pending') {
				self.value = value;
				self.status = 'resolved';
				self.onResolvedCallbacks.forEach( fn => {
					fn();
				});

			}
		}

		let reject = reason => {
			if (self.status === 'pending') {
				self.reason = reason;
				self.status = 'rejected';
				self.onRejectedCallbacks.forEach( fn => {
					fn();
				});
			}
		}

		try {
			executor(resolve, reject);
		} catch (e) {
			reject(e);
		}
	}
	then (onFulfilled, onRejected) {
		// 值的穿透
		onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : function(data) {
			return data;
		}
		onRejected = typeof onRejected === 'function' ? onRejected : function(err) {
			throw err;
		}
		let self = this;
		let promise2 = new Promise( (resolve, reject) => {
			if (self.status === 'resolved') {
				setTimeout(function () {	// promise是异步执行的
					try {
						let x = onFulfilled(self.value);
						resolvePromise(x, promise2, resolve, reject);
					} catch (e) {
						reject(e);
					}
				}, 0);
			}
			if (self.status === 'rejected') {
				setTimeout(function () {
					try {
						let x = onRejected(self.reason);
						resolvePromise(x, promise2, resolve, reject);
					} catch (e) {
						reject(e);
					}
				}, 0);
			}
			if (self.status === 'pending') {
				self.onResolvedCallbacks.push(function () {
					setTimeout(function () {
						try {
							let x = onFulfilled(self.value);
							resolvePromise(x, promise2, resolve, reject);
						} catch (e) {
							reject(e);
						}
					}, 0);
				});
				self.onRejectedCallbacks.push(function () {
					setTimeout(function () {
						try {
							let x = onRejected(self.reason);
							resolvePromise(x, promise2, resolve, reject);
						} catch (e) {
							reject(e);
						}
					}, 0);
				});
			}
		});

		return promise2;
	}
	finally (fn) {
		return this.then(data => {
			fn();
			return data;
		}, err => {
			fn();
			throw err;
		})
	}
	catch (onRejected) {
		return this.then(null, onRejected)
	}
	resolve () {
		return new Promise((resolve, reject) => {
			resolve(data);
		})
	}
	reject () {
		return new Promise((resolve, reject) => {
			reject(reason);
		})
	}
	all (promises) {
		// 方法要依次执行，利用计数器判断，所有方法执行完成，返回成功，有一个失败即失败
		return new Promise((resolve, reject) => {
			let arr = [];
			let sum = 0;
			function save (index, data) {
				sum++;
				arr[index] = data;
				if (sum === promises.length) {
					resolve(arr);
				}
			}
			for (let i = 0; i < promises.length; i++) {
				let promise = promises[i];
				if (typeof promise.then === 'function') {
					promise.then( data => {
						save(i, data);
					}, err => {
						reject(err);
					});
				} else {
					save(i, data);
				}
			}
		})

	}
	race (promises) {
		return new Promise((resolve, reject) => {
			for (let i = 0; i < promises.length; i++) {
				let promise = promises[i];
				if (typeof promise.then === 'function') {
					promise.then(data => {
						resolve(data);
					}, err => {
						reject(err);
					});
				} else {
					resolve(promise);
				}
			}
		})
	}
} 

let resolvePromise = (x, promise2, resolve, reject) => {
	let called;		// 成功和失败只能有一个状态
	if (x === promise2) {
		return reject(new TypeError('循环引用'));	
	}
	if (x !== null && (typeof x === 'object' || typeof x === 'function')) {
		try {
			let then = x.then;
			if (typeof then === 'function') {
				then.call(x, y => {
					if (!called) {
						called = true;
						// y 可能是一个函数，需要递归比较
						resolvePromise (y, promise2, resolve, reject);
					}
				}, r => {
					if (!called) {
						called = true;
						reject(r);
					}
				});
			} else {
				resolve(x);
			}
		} catch (e) {
			reject(e);
		}
	} else {
		resolve(x);
	}
}

module.exports = Promise;
